* TODOs
** Test suite [5/7]
- [X] ~simple.py~
- [X] ~layout.py~
- [X] ~grid.py~
- [X] ~form.py~
- [X] ~menu.py~
- [ ] ~toolbar.py~
- [ ] ~signal.py~
** Features [0/3]
- [ ] 'rows' attributes in grid layout
- [ ] ability to take a ~QObject~ as children arguments in ~m()~
- [ ] provide alternative call syntax, \eg, ~m.label(*)~ is ~m('label', *)~

* Introduction
~m(tag, *args=None, attributes=None, children=None)~ creates a ~cell~ object
which contains the meta information of an element. A later execution of
~build()~ will then construct the Qt objects based upon the ~cell~ object.

The arguments are explained as follows:
- ~tag~ <<m.param.tag>> :: A factory which will create a
     widget by calling ~WidgetClass(*args)~ *(TODO what if ~**kwargs~ is in
     need?)*. It could be also a recognized string that corresponds to a known
     Qt class, e.g., ~m('label')~ will be simply treated the same as
     ~m(QLabel)~.
- ~*args~ :: See [[m.param.tag][above]].
- ~attributes~ :: A dict of the tag attributes: ~{"key": val}~ leads a call of
     ~QObject.setKey(val)~ at last.
- ~children~ :: A ~m()~ object, a list or a tuple that will be attached to the
     current element. The attach method is always implicitly inferred.

Generally, ~m(tag, *args, attributes, children)~ effective produces the
following pseudo code:
#+BEGIN_SRC python
  element = tag_induced_element_type(*args)
  for k, v in attributes:
      element.setK(v)             # K is the camel-cased version of k
      continue
  children = ChildClass(*child_args, parent=element)
  attach(element, children)       # see Parent & Children
#+END_SRC

** Parent & Children
There are two different parent-child relationship in Qt: ownership (between
~QObject~) and visual attachment/placement (between ~QWidget~). Involved
functions are: ~child = QObject(parent)~, ~parent.add_*(child)~,
~parent.set_*(child)~.

1. ~child = QObject(parent)~ sets the ownership (~parent~ owns ~child~, which
   means that ~child~ is automatically destroyed when ~parent~ is destroyed).

   Generally, ~child~ is visually attached to ~parent~ if ~parent~ and ~child~
   are both ~QWidget~, with a few exceptions (of course):

   + ~QWidget~ and ~QMenu~ (\ie, ~QMenu(parent=QWidget())~ will not display a
     menu in a widget)

   In ~m()~, a cell will always be created with a parent (except the case that
   the parent is a ~QLayout~, since ~QLayout::addWidget()~ will take care of
   the ownership).

2. If the ownership does not imply a visual attachment, we need explicitly call
   ~parent.add_*()~ to ensure the appropriate display. ~parent.add_*()~ usually
   has overloaded versions, and the parent-child relationship may be different:

   + insertion :: ~parent.add_*(object)~ visually attaches the already-existing
        ~object~ to the parent; parent will not take the ownership of object,
        with the exception of ~addLayout~ (where the parent widget of layout
        will takes ownership of ~child~).

   + emplacement :: ~parent.add_*(*args)~ creates an object and then attach it
        to the view; parent owns the object. This is actually equivalent to
        #+BEGIN_SRC python
          child = ChildClass(*args, parent=parent)
          parent.add_WHAT_EVER_METHOD(child)
        #+END_SRC

   In ~m()~, the insertion version of ~add_*~ (maybe a no-op) is automatically
   inferred and applied with respect to the types of parent and child. For
   instance, ~m('menu_bar', m('menu'))~ will generate
   #+BEGIN_SRC python
     mb = QMenuBar(parent=None)
     m = QMenu(parent=mb)
     mb.addMenu(m)                   # inferred by QMenuBar and QMenu
   #+END_SRC
   while ~m('label', m('label'))~ generates
   #+BEGIN_SRC python
     pl = QLabel(parent=None)
     cl = QLabel(parent=pl)
     # pl.attach(cl)          no-op
   #+END_SRC

3. The difference between the family of ~parent.set_*~
   (~QMainWindow::setCentralWidget~, ~QMainWindow::setMenuBar~,
   ~QLayout::setMenuBar~) and ~parent.add_*~ functions is that ~set_*~ takes a
   lot of care on the geometry, while ~parent.add_*~ is usually logical. If the
   ownership of the child is taken by the parent depends, \eg, ~QMainWindow~
   takes ownership while ~QLayout~ doesn't.

* Examples
For clearances (and saving some typing), a shortcut ~label('text')~ will be
used instead of ~m('label', 'text')~.

#+BEGIN_SRC python
  def label(*args):
      return m('label', *args)
#+END_SRC

** Single child
The example shows a parent element with argument and attribute and its child
element.

#+BEGIN_SRC python
  label('parent', {'indent': 20}, label('child'))
#+END_SRC
is basically
#+BEGIN_SRC python
  parent = QLabel('parent', parent=None)
  parent.setIndent(20)
  child = QLabel('child', parent=parent)
#+END_SRC

** Multiple children
Take ~label('parent', [label('child 1'), label('child 2')])~ as an example, if
we interpret it as
#+NAME: src.python.naive.multiple.children
#+BEGIN_SRC python
  parent = QLabel('parent', parent=None)
  child1 = QLabel('child 1', parent=parent)
  child2 = QLabel('child 2', parent=parent)
#+END_SRC
~child1~ and ~child2~ will be placed to the same position of ~parent~, hence
they are overlapping each other.

A layout can place multiple widgets for us (without overlapping), \eg,
#+NAME: src.python.explicit.layout
#+BEGIN_SRC python
  label('parent', m('h_box_layout', [label('child 1'), label('child 2')]))
#+END_SRC
which generates
#+BEGIN_SRC python
  parent = QLabel('parent', parent=None)
  layout = QHBoxLayout(parent=parent)
  parent.addLayout(layout)                 # 'addLayout' is inferred from parent and layout

  child_1 = QLabel('child 1', parent=None) # don't set parent for child_1
  layout.addWidget(child_1)                # because it will be auto-reparented

  child_2 = QLabel('child 2', parent=None) # don't set parent for child_2
  layout.addWidget(child_2)                # 'addWidget' is inferred from layout and child_2
#+END_SRC

Because the usage of a layout is so convenient and common, a layout will be
automatically inserted when a list or a tuple of elements is encountered. The
layout is referred to as a /container/.

With the implicit container mechanism, ~label('parent', [label('child 1'),
label('child 2')])~ is now exactly the same as [[src.python.explicit.layout][explict layout contruction]].

The container can be skipped by writing
#+BEGIN_SRC python
  label('parent', [{'container': None}, label('child 1'), label('child 2')])
#+END_SRC
which now generates codes in [[src.python.naive.multiple.children][naive multiple children appending]] that produces
overlapped labels. See [[container.with.attributes][container with attributes]] for more information.

** Container types
As pointed above, the cells inside a list or tuple will be by default wrapped
in a newly created container. If the cells are widgets, the container will be a
~QLayout~. Specifically, the container is determined by the type of the parent
and children, where
| parent \vert children | ~list~        | ~tuple~        |
|-----------------------+---------------+----------------|
| ~QWidget~             | ~QHBoxLayout~ | ~QVBoxLayout~  |
| ~QMenu~               | self          | ~QActionGroup~ |
| ~QActionGroup~        | self          | -              |
| ~QLayout~             | self          | self           |

As shown, the container may not be constructed, \eg, if the parent is ~QMenu~,
the child menus and actions wrapped in a list are directly appended to the
parent menu. The inserted container will never be a ~QWidget~ (both ~QLayout~
and ~QActionGroup~ are behaivor managers).

** Container with attributes <<container.with.attributes>>
The container could have attributes and constructor arguments (/not supported
yet/).

#+BEGIN_SRC python
  m('Widget', [{'container': 'v_box', 'spacing': 30}, label('1'), label('2')])
#+END_SRC
is translated to
#+BEGIN_SRC python
  parent = QLabel('parent', parent=None)
  container = QVBoxLayout(parent=parent) # QVBoxLayout is selected by the 'container' meta-attribute
  container.setSpacing(30)               # automatically generated by the 'spacing' container-attribute
  container.addWidget(QLabel('1', parent=None)) # save some typings
  container.addWidget(QLabel('2', parent=None))
#+END_SRC

The container will not be constructed if ~{'container': None}~ attribute is
met.

*** ~QGridLayout~
The ~QGridLayout~ is not automatically inferred but need manual configuration:
#+BEGIN_SRC python
  m('widget', [
      {'container': 'grid', 'columns': 3},

      label('1'), None,       label('3'),
      None,       label('5'), None,
      label('7'), None,       label('9')
  ])
#+END_SRC
will create a ~QGridLayout~ with 3 columns. ~None~ indicates a position which
is not occupied (a placeholder).

The expanded code will read as
#+BEGIN_SRC python
  widget = QWidget(parent=None)
  container = QGridLayout(parent=widget)
  container.addWidget(QLabel('1',parent=None), 0, 0)
  container.addWidget(QLabel('3',parent=None), 0, 2)
  container.addWidget(QLabel('5',parent=None), 1, 1)
  container.addWidget(QLabel('7',parent=None), 2, 0)
  container.addWidget(QLabel('9',parent=None), 2, 2)
#+END_SRC

** Nested container
A nested tuple/list produces nested container. A grid layout can be emulated by
nesting ~QVBoxlayout~ and ~QHBoxlayout~.

The following three layout are visually the same.

Vanilla ~QGridLayout~:
#+BEGIN_SRC python
  m('Widget', [
      {'container': 'grid', 'columns': 3},
      label('1'), label('2'), label('3'),
      label('4'), label('5'), label('6'),
      label('7'), label('8'), label('9')
  ])
#+END_SRC

~QVBoxLayout~ nested in ~QHBoxLayout~ (note the order of numbers):
#+BEGIN_SRC python
  m('Widget', [
      (label('1'), label('4'), label('7')),
      (label('2'), label('5'), label('8')),
      (label('3'), label('6'), label('9'))
  ])
#+END_SRC

~QHBoxLayout~ nested in ~QVBoxLayout~:
#+BEGIN_SRC python
  m('Widget', (
      [label('1'), label('2'), label('3')],
      [label('4'), label('5'), label('6')],
      [label('7'), label('8'), label('9')]
  ))
#+END_SRC

** Container element other than a cell
A container (\eg, ~QMenu~, ~QLayout~) may have a non-cell element, such as a
separator, a spacing or a stretch, \etc. This could be simply done by placing a
plain string.

The ~None~ placeholder in a ~QGridLayout~ is non-cell element, too.

#+BEGIN_SRC python
  m('widget', [label('1'), 'stretch', label('2')])
#+END_SRC
generates
#+BEGIN_SRC python
  parent = QLabel('parent', parent=None)
  container = QHBoxLayout(parent=parent)
  container.addWidget(QLabel('1', parent=None))
  container.addStretch()
  container.addWidget(QLabel('2', parent=None))
#+END_SRC

** Container element with arguments
Whether a container element is a cell or not, extra arguments may need be
passed to the ~add_*~ functions. A helper function ~m.add(method_or_cell,
*method_args)~ (think of a better name or representation?) is provided for the
task.

~m.add()~ is only applicable inside a container.

#+BEGIN_SRC python
  m('Widget', ['stretch', label('1'), m.add('spacing', 80),  m.add(label('2'), 0, Qt.AlignLeft)])
#+END_SRC
is expanded to
#+BEGIN_SRC python
  widget = QWidget(parent=None)
  container = QHBoxLayout(parent=widget)
  container.addStretch()
  container.addWidget(QLabel('1', parent=None))
  container.addSpacing(80)
  container.addWidget(QLabel('2', parent=None), 0, Qt.AlignLeft)
#+END_SRC

** Nested container with arguments
Since a inner container is an element of the outter container, it can have
arguments as well.

#+BEGIN_SRC python
  m('widget', [
      {'container': 'grid', 'columns': 3},

      m.add([label('1'), label('1')], 1, 2),  None,       label('3'),
      m.add((label('4'), label('4')), 2, 1),  label('5'), label('6'),
      None,                                   label('8'), label('9')
  ])
#+END_SRC
generates
#+BEGIN_SRC python
  widget = QWidget(parent=None)
  container = QGridLayout(parent=widget)

  ## m.add([label('1'), label('1')], 1, 2)
  sub_container1 = QHBoxLayout(parent=container)
  sub_container1.addWidget(QLabel('1', parent=None))
  sub_container1.addWidget(QLabel('1', parent=None))
  # (row, column) arguments are automatically calculated (0,0)
  #
  # (rowSpan, columnSpan) arguments are read from the code
  container.addLayout(sub_container1, 0, 0, 1, 2)

  container.addWidget(QLabel('3', parent=None), 0, 2)

  sub_container2 = QVBoxLayout(parent=container)
  sub_container2.addWidget(QLabel('4', parent=None))
  sub_container2.addWidget(QLabel('4', parent=None))
  container.addLayout(sub_container2, 0, 1, 2, 1)

  container.addWidget(QLabel('5', parent=None), 1, 1)
  container.addWidget(QLabel('6', parent=None), 1, 2)
  container.addWidget(QLabel('8', parent=None), 2, 1)
  container.addWidget(QLabel('9', parent=None), 2, 2)
#+END_SRC

